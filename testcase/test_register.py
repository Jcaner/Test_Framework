import unittest
import requests
import json
from datetime import datetime
from ddt import ddt, data
from common.HTMLTestRunner import HTMLTestRunner
from common.excel_tools import ExcelTools
from config.config import Config


testxlsx = Config().base_path + '/testdata/xlsx/test_register_data.xlsx'
testdata = ExcelTools('r', testxlsx).dict_values()


@ddt
class TestRegister(unittest.TestCase):

    @classmethod
    def setUpClass(cls) -> None:
        """需要登录的操作可写在此方法内"""
        cls.s = requests.Session()

    @classmethod
    def tearDownClass(cls) -> None:
        pass

    def setUp(self):
        pass

    def tearDown(self):
        pass

    @data(*testdata)
    def test_register(self, t_data):
        """Test /api/register"""
        conf = Config()
        url = '%s/api/register' % conf.base_url
        payload = {
            "InvitationCode": t_data['InvitationCode'],
            "UserName": t_data['UserName'],
            "RealName": t_data['RealName'],
            "Password": t_data['Password'],
            "ImgCode": t_data['ImgCode'],
            "SourceType": t_data['SourceType']
        }
        headers = {
            "Content-Type": "application/json"
        }
        date = datetime.now().strftime("%Y/%m/%d %H:%M:%S")
        response = self.s.post(url, json=payload, headers=headers)

        print("*******正在执行用例：-----  %s  ----**********" % t_data['CaseId'])
        print('请求地址：', url)
        print('请求方法：', 'post')
        print('请求时间：', date)
        print('http状态码：', response.status_code)
        print('检查点：Code:', int(t_data['Code']))
        print('输入数据：')
        print(json.dumps(payload, ensure_ascii=False, indent=4, separators=(',', ': ')))
        self.assertEqual(requests.codes.ok, response.status_code)
        if response.status_code == requests.codes.ok:
            response_json = response.json()
            self.assertEqual(requests.codes.ok, response.status_code)
            print('返回数据：')
            print(json.dumps(response_json, ensure_ascii=False, indent=4, separators=(',', ': ')))
            self.assertEqual(int(t_data['Code']), response_json['Code'])
            if t_data['StrCode'] != '':
                self.assertEqual(t_data['StrCode'], response_json['StrCode'])


if __name__ == "__main__":
    testreport_file = Config().base_path + '/testreport/api_register_Report.html'
    cases = unittest.TestLoader().loadTestsFromTestCase(TestRegister)
    with open(testreport_file, 'w', encoding='utf8') as f:
        runner = HTMLTestRunner(
            stream=f,
            title='/api/register Test Report',
            description='generated by HTMLTestRunner.',
            verbosity=2
        )
        runner.run(cases)
